{"version":3,"sources":["components/Filter/Filter.module.css","App.module.css","components/ContactList/ContactList.module.css","redux/phoneBook/phoneBook-actions.js","redux/phoneBook/phoneBook-reducer.js","redux/store.js","redux/phoneBook/phoneBook-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","console","log","actions","type","items","createReducer","state","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","phonebookPersistConfig","key","storage","store","configureStore","reducer","phoneBook","persistReducer","phoneBookReducer","devTools","process","persistor","persistStore","getContacts","getFilter","getVisibleContacts","contacts","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","validateData","data","msg","find","contact","alert","phoneBookActions","handleNameChange","evt","target","value","reset","onSubmit","e","preventDefault","className","s","form","label","input","placeholder","onChange","button","Filter","ContactList","visibleContacts","map","onClick","onDeleteContact","App","container","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.68f8e55d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Filter_button__1Bouw\",\"input\":\"Filter_input__3C7LZ\",\"label\":\"Filter_label__1RjdN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__HWxgC\",\"App-logo\":\"App_App-logo__2A31V\",\"App-header\":\"App_App-header__3_wtt\",\"App-link\":\"App_App-link__11Mxi\",\"container\":\"App_container__1Rvi2\",\"App-logo-spin\":\"App_App-logo-spin__M9aDu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__2nJFn\"};","import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst addContact = createAction('phoneBook/Add', ({ name, number }) => ({\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\n\nconst deleteContact = createAction('phoneBook/Delete');\nconst changeFilter = createAction('phoneBook/ChangeFilter');\n\n// console.log(\n//   addContact({\n//     name: 'batman',\n//     number: 555,\n//   }),\n// );\n\nexport default { addContact, deleteContact, changeFilter };\n\n// old redux\n\n// import { v4 as uuidv4 } from 'uuid';\n// import types from './phoneBook-types';\n\n// const addContact = ({ name, number }) => ({\n//   type: types.ADD,\n//   payload: {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   },\n// });\n\n// console.log(addContact.payload);\n\n// const deleteContact = contactId => ({\n//   type: types.DELETE,\n//   payload: contactId,\n// });\n\n// const changeFilter = value => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n\n// export default { addContact, deleteContact, changeFilter };\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from '../phoneBook/phoneBook-actions';\nconst defaultItems = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nconsole.log(actions.addContact.type);\n\nconst items = createReducer(defaultItems, {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n\n// old redux\n\n// import { combineReducers } from 'redux';\n// import types from './phoneBook-types';\n\n// const defaultItems = [\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n// ];\n\n// const items = (state = defaultItems, { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       return [...state, payload];\n\n//     case types.DELETE:\n//       return state.filter(({ id }) => id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case types.CHANGE_FILTER:\n//       console.log(payload);\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// export default combineReducers({\n//   items,\n//   filter,\n// });\n","import {\n  configureStore,\n  getDefaultMiddleware,\n  // combineReducers,\n} from '@reduxjs/toolkit';\nimport phoneBookReducer from './phoneBook/phoneBook-reducer';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport logger from 'redux-logger';\nimport storage from 'redux-persist/lib/storage';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n// console.log(process.env.NODE_ENV);\n\nconst phonebookPersistConfig = {\n  key: 'contacts',\n  storage,\n  // blacklist: 'any',\n};\n\n// const rootReducer = combineReducers({\n//   phoneBook: persistReducer(phonebookPersistConfig, phoneBookReducer),\n// });\n\n// const persistedReducer = persistReducer(phonebookPersistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: {\n    phoneBook: persistReducer(phonebookPersistConfig, phoneBookReducer),\n  },\n  // reducer: rootReducer,\n  // reducer: persistedReducer,\n  // {\n  //   phoneBook: phoneBookReducer,\n  // },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n\n// Old vanila redux\n\n// import { createStore, combineReducers } from 'redux';\n// import { configureStore } from '@reduxjs/toolkit';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// import phoneBookReducer from './phoneBook/phoneBook-reducer';\n\n// const rootReducer = combineReducers({\n//   phoneBook: phoneBookReducer,\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n\n// const store = configureStore({});\n// export default store;\n","export const getContacts = state => state.phoneBook.items;\nexport const getFilter = state => state.phoneBook.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n  console.log(filter, contacts);\n\n  return contacts.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import PropTypes from 'prop-types';\nimport { Component, useState } from 'react';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\nimport { getContacts } from '../../redux/phoneBook/phoneBook-selectors';\n\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  // console.log(contacts);\n  const dispatch = useDispatch();\n  const onAddContact = data => dispatch(phoneBookActions.addContact(data));\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    validateData();\n    reset();\n  };\n\n  const validateData = () => {\n    const normalizedFilter = name.toLowerCase();\n    const msg = contacts.find(\n      contact => contact.name.toLowerCase() === normalizedFilter,\n    );\n\n    if (!name || !number) {\n      alert('Введите правильное имя и телефон');\n      return;\n    }\n\n    if (msg) {\n      alert('Taкое имя уже есть');\n      return;\n    } else {\n      onAddContact({\n        name,\n        number,\n      });\n    }\n  };\n\n  const handleNameChange = evt => {\n    const { value, name } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form}>\n      <label className={s.label}>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Enter contact name\"\n          onChange={handleNameChange}\n        ></input>\n      </label>\n      <label className={s.label}>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          placeholder=\"Enter contact number\"\n          onChange={handleNameChange}\n        ></input>\n      </label>\n      <button type=\"submit\" className={s.button}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleSubmit = evt => {\n//     evt.preventDefault();\n//     console.log(this.state);\n//     console.log(evt);\n//     this.validateData();\n//     this.reset();\n//   };\n\n//   validateData = () => {\n//     const { name, number } = this.state;\n//     const { contacts } = this.props;\n\n//     const normalizedFilter = name.toLowerCase();\n//     const msg = contacts.find(\n//       contact => contact.name.toLowerCase() === normalizedFilter,\n//     );\n//     console.log(msg);\n\n//     if (!name || !number) {\n//       alert('Введите правильное имя и телефон');\n//       return;\n//     }\n\n//     if (msg) {\n//       alert('Taкое имя уже есть');\n//       return;\n//     } else {\n//       this.props.onAddContact(this.state);\n//       // console.log(this.props.contacts);\n//     }\n//   };\n\n//   handleNameChange = evt => {\n//     const { name, value } = evt.target;\n//     this.setState({\n//       [name]: value,\n//     });\n//     // console.log(name);\n//     // console.log(value);\n//   };\n\n//   reset = () => {\n//     this.setState({\n//       name: '',\n//       number: '',\n//     });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form onSubmit={this.handleSubmit} className={s.form}>\n//         <label className={s.label}>\n//           Name\n//           <input\n//             className={s.input}\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             placeholder=\"Enter contact name\"\n//             onChange={this.handleNameChange}\n//           ></input>\n//         </label>\n//         <label className={s.label}>\n//           Number\n//           <input\n//             className={s.input}\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             placeholder=\"Enter contact number\"\n//             onChange={this.handleNameChange}\n//           ></input>\n//         </label>\n//         <button type=\"submit\" className={s.button}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => ({\n//   contacts: state.phoneBook.items,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onAddContact: data => dispatch(phoneBookActions.addContact(data)),\n// });\n\n// ContactForm.propTypes = {\n//   onAddContact: PropTypes.func.isRequired,\n//   contacts: PropTypes.array.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\n// OldRedux\n\n// import PropTypes from 'prop-types';\n// import { Component } from 'react';\n// import { connect } from 'react-redux';\n// import phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\n\n// import s from './ContactForm.module.css';\n\n// class ContactForm extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleSubmit = evt => {\n//     evt.preventDefault();\n//     console.log(this.state);\n//     console.log(evt);\n//     this.validateData();\n//     this.reset();\n//   };\n\n//   validateData = () => {\n//     const { name, number } = this.state;\n//     const { contacts } = this.props;\n\n//     const normalizedFilter = name.toLowerCase();\n//     const msg = contacts.find(\n//       contact => contact.name.toLowerCase() === normalizedFilter,\n//     );\n//     console.log(msg);\n\n//     if (!name || !number) {\n//       alert('Введите правильное имя и телефон');\n//       return;\n//     }\n\n//     if (msg) {\n//       alert('Taкое имя уже есть');\n//       return;\n//     } else {\n//       this.props.onAddContact(this.state);\n//       // console.log(this.props.contacts);\n//     }\n//   };\n\n//   handleNameChange = evt => {\n//     const { name, value } = evt.target;\n//     this.setState({\n//       [name]: value,\n//     });\n//     // console.log(name);\n//     // console.log(value);\n//   };\n\n//   reset = () => {\n//     this.setState({\n//       name: '',\n//       number: '',\n//     });\n//   };\n\n//   render() {\n//     const { name, number } = this.state;\n//     return (\n//       <form onSubmit={this.handleSubmit} className={s.form}>\n//         <label className={s.label}>\n//           Name\n//           <input\n//             className={s.input}\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             placeholder=\"Enter contact name\"\n//             onChange={this.handleNameChange}\n//           ></input>\n//         </label>\n//         <label className={s.label}>\n//           Number\n//           <input\n//             className={s.input}\n//             type=\"tel\"\n//             name=\"number\"\n//             value={number}\n//             placeholder=\"Enter contact number\"\n//             onChange={this.handleNameChange}\n//           ></input>\n//         </label>\n//         <button type=\"submit\" className={s.button}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// const mapStateToProps = state => ({\n//   contacts: state.phoneBook.items,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onAddContact: data => dispatch(phoneBookActions.addContact(data)),\n// });\n\n// ContactForm.propTypes = {\n//   onAddContact: PropTypes.func.isRequired,\n//   contacts: PropTypes.array.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import { connect, useSelector, useDispatch } from 'react-redux';\n// import PropTypes from 'prop-types';\nimport phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\nimport s from './Filter.module.css';\nimport { getFilter } from '../../redux/phoneBook/phoneBook-selectors';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  // const onChange = e => dispatch(phoneBookActions.changeFilter(e.target.value));\n\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"string\"\n        name=\"filter\"\n        placeholder=\"Enter contact name to find\"\n        value={value}\n        onChange={e => dispatch(phoneBookActions.changeFilter(e.target.value))}\n        // onChange={onChange}\n      ></input>\n    </label>\n  );\n}\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n// OldRedux\n\n// import { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\n// import phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\n// import s from './Filter.module.css';\n\n// function Filter({ value, onChange }) {\n//   return (\n//     <label className={s.label}>\n//       Find contacts by name\n//       <input\n//         className={s.input}\n//         type=\"string\"\n//         name=\"filter\"\n//         placeholder=\"Enter contact name to find\"\n//         value={value}\n//         onChange={onChange}\n//       ></input>\n//     </label>\n//   );\n// }\n\n// const mapStateToProps = state => ({\n//   value: state.phoneBook.filter,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => {\n//     console.log(e.target.value);\n//     return dispatch(phoneBookActions.changeFilter(e.target.value));\n//   },\n// });\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { connect, useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\nimport s from './ContactList.module.css';\nimport {\n  getContacts,\n  getFilter,\n  getVisibleContacts,\n} from '../../redux/phoneBook/phoneBook-selectors';\n\n// const getVisibleContacts = (contacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n//   console.log(filter);\n\n//   return contacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\nexport default function ContactList() {\n  const visibleContacts = useSelector(getVisibleContacts);\n  // const contacts = useSelector(state => state.phoneBook.items);\n  // const filter = useSelector(state => state.phoneBook.filter);\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(phoneBookActions.deleteContact(id));\n\n  // const visibleContacts = getVisibleContacts(contacts, filter);\n\n  return (\n    <ul>\n      {visibleContacts &&\n        visibleContacts.map(({ id, name, number }) => (\n          <li key={id}>\n            <p>\n              {name} {number}\n            </p>\n            <button\n              type=\"button\"\n              id={id}\n              onClick={() => onDeleteContact(id)}\n              className={s.button}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\n// OldRedux\n\n// import { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\n// import phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\n// import s from './ContactList.module.css';\n\n// function ContactList({ onDeleteContact, contacts }) {\n//   // const filteredContacts = visibleContacts;\n//   return (\n//     <ul>\n//       {contacts &&\n//         contacts.map(({ id, name, number }) => (\n//           <li key={id}>\n//             <p>\n//               {name} {number}\n//             </p>\n//             <button\n//               type=\"button\"\n//               id={id}\n//               onClick={() => onDeleteContact(id)}\n//               className={s.button}\n//             >\n//               Delete\n//             </button>\n//           </li>\n//         ))}\n//     </ul>\n//   );\n// }\n\n// const getVisibleContacts = (allContacts, filter) => {\n//   const normalizedFilter = filter.toLowerCase();\n//   console.log(filter);\n\n//   return allContacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n// const mapStateToProps = state => {\n//   const { filter, items } = state.phoneBook;\n//   const visibleContacts = getVisibleContacts(items, filter);\n//   // items.filter(item => item.name.toLowerCase().includes(normalizedFilter));\n\n//   return {\n//     // contacts: state.phoneBook.items,\n//     contacts: visibleContacts,\n//   };\n// };\n\n// // Упрощенный вариант\n// // const mapStateToProps = ({ phoneBook: { items, filter } }) => ({\n// //   contacts: getVisibleContacts(items, filter),\n// // });\n\n// const mapDispatchToProps = dispatch => ({\n//   onDeleteContact: id => dispatch(phoneBookActions.deleteContact(id)),\n// });\n\n// ContactList.propTypes = {\n//   contacts: PropTypes.array.isRequired,\n//   onDeleteContact: PropTypes.func.isRequired,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { Component } from 'react';\n\nimport s from './App.module.css';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\nexport default function App() {\n  return (\n    <div className={s.container}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\n// OldRedux\n// import { Component } from 'react';\n\n// import s from './App.module.css';\n// import ContactForm from './components/ContactForm/ContactForm';\n// import Filter from './components/Filter/Filter';\n// import ContactList from './components/ContactList/ContactList';\n\n// export default class App extends Component {\n//   // state = {\n//   //   contacts: [\n//   //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n//   //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n//   //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n//   //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n//   //   ],\n//   //   filter: '',\n//   // };\n\n//   // componentDidMount() {\n//   //   console.log('Component did mount');\n//   //   const contacts = localStorage.getItem('contacts');\n//   //   const parsedContacts = JSON.parse(contacts);\n//   //   console.log(contacts);\n//   //   console.log(parsedContacts);\n//   //   if (parsedContacts) {\n//   //     this.setState({ contacts: parsedContacts });\n//   //   }\n//   // }\n\n//   // componentDidUpdate(prevProps, prevState) {\n//   //   console.log('Component did update');\n//   //   if (this.state.contacts !== prevState.contact) {\n//   //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//   //   }\n//   // }\n\n//   // onAddContact = ({ name, number }) => {\n//   //   const { contacts } = this.state;\n//   //   this.setState(prevState => {\n//   //     return {\n//   //       contacts: [...prevState.contacts, { id: uuidv4(), name, number }],\n//   //     };\n//   //   });\n//   //   console.log(contacts);\n//   // };\n\n//   // onFilter = evt => {\n//   //   const { name, value } = evt.target;\n//   //   this.setState({\n//   //     [name]: value,\n//   //   });\n//   //   console.log(this.state.filter);\n//   // };\n\n//   // getVisibleContacts = () => {\n//   //   const { filter, contacts } = this.state;\n\n//   //   const normalizedFilter = filter.toLowerCase();\n\n//   //   return contacts.filter(contact =>\n//   //     contact.name.toLowerCase().includes(normalizedFilter),\n//   //   );\n//   // };\n\n//   // deleteContact = evt => {\n//   //   console.log(evt.target.id);\n//   //   this.setState(prevState => ({\n//   //     contacts: prevState.contacts.filter(\n//   //       contact => contact.id !== evt.target.id,\n//   //     ),\n//   //   }));\n//   // };\n\n//   render() {\n//     // const { filter, contacts } = this.state;\n//     // const filteredContacts = this.getVisibleContacts();\n//     // console.log(filteredContacts);\n//     return (\n//       <div className={s.container}>\n//         <h1>Phonebook</h1>\n//         <ContactForm\n//         // contacts={contacts} onAddContact={this.onAddContact}\n//         />\n//         <h2>Contacts</h2>\n//         <Filter\n//         // value={filter} onChange={this.onFilter}\n//         />\n//         <ContactList\n//         // onDeleteContact={this.deleteContact}\n//         // onGetVisibleContacts={this.getVisibleContacts}\n//         />\n//       </div>\n//     );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1gbmC\",\"label\":\"ContactForm_label__XBgTc\",\"input\":\"ContactForm_input__2BHwP\",\"button\":\"ContactForm_button__1m0oj\"};"],"sourceRoot":""}